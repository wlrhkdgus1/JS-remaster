갤러리까지 만들고 포토폴리오 사용.

window object
window 객체
Javascript 실행시 가장 상위에 존재하는 객체
변수를 선언하거나 함수 선언시 window 객체안에 선언됨
표시된 웹 페이지의 정보에 접근하거나 변경을 할 수 있음
window.location : 현재 브라우저 창의 주소를 나타내는 객체
window.location.href : 브라우저 창에 입력된 주소, 변경 가능 
window.navigator : 브라우저 자체에 대한 정보
window.screen : 디스플레이의 사이즈  // width heigth 등 알수있음.
window.document : 웹 페이지 문서의 HTML, CSS 등에 대한 접근 가능



document



DOM 소개 및 탐색
DOM, Document Object Model
컴퓨터가 문서를 잘 처리할 수 있도록 문서의 구조를 약속한 것
Tree 형태를 따름 : 족보나 가계도와 비슷함
document object
javascript에서 document로 접근 가능
children에는 문서의 최상위 엘리먼트인 html이 존재
Element API
자식, 부모 엘리먼트에 접근하는 방법
.children : 해당 object의 자식 노드에 대한 배열
.parentNode : 부모 노드
.firstElementChild : 첫 자식 엘리먼트
.lastElementChild : 마지막 자식 엘리먼트
같은 레벨의 형제 엘리먼트에 접근하는 방법
.nextElementSibling
.previousElementSibling
실습에 사용된 코드



다중 Element 선택
Document API
document.getElementsBy~ : 다중 엘리먼트를 선택하는 메소드. 배열형태로 값을 반환함
document.getElementsByTagName 메소드
인자로 HTML element 태그의 이름을 전달하면 해당 엘리먼트들이 반환됨
document.getElementsClassName 메소드
인자로 class의 이름을 전달하면, 해당 class의 모든 엘리먼트가 배열로 반환됨
document.getElementsByName 메소드
인자로 name을 전달하면, 해당 name 속성을 가진 모든 엘리먼트가 배열로 반환됨.
Element API
.value 속성
input element에 입력된 값은 .value를 통해 얻어올 수 있음
getAttribute 메소드로는 받아올 수 없다는 점 주의



CSS Selector를 이용한 Element 선택
Document API
document.querySelector : css selector를 기반으로 엘리먼트를 선택
조건에 부합하는 element가 여러개인 경우 첫 엘리먼트만 반환.
document.querySelectorAll : css selector를 기반으로 만족하는 모든 엘리먼트를 선택
CSS Selector
# : name 기반으로 선택
. : class 기반으로 선택
, : 여러개의 셀렉터를 사용


Element 추가/삭제
Document API
document.createElement() : 문자열 인자로 element tag를 입력하면 해당 엘리먼트가 생성돼 반환됨
Element API
.appendChild(인자) : 추가할 element를 인자로 받아 호출된 element의 자식으로 인자를 추가함
.removeChild(인자) : 삭제할 element를 인자로 받아 호출된 element의 자식중에서 해당 element를 삭제
.insertBefore(인자1, 인자2) : 인자1로 받은 element를 호출된 element의 자식중 인자2의 이전에 추가함
.cloneNode() : 호출된 element를 복사해서 반환함


Element 추가/삭제
Document API
document.createElement() : 문자열 인자로 element tag를 입력하면 해당 엘리먼트가 생성돼 반환됨
Element API
.appendChild(인자) : 추가할 element를 인자로 받아 호출된 element의 자식으로 인자를 추가함
.removeChild(인자) : 삭제할 element를 인자로 받아 호출된 element의 자식중에서 해당 element를 삭제
.insertBefore(인자1, 인자2) : 인자1로 받은 element를 호출된 element의 자식중 인자2의 이전에 추가함
.cloneNode() : 호출된 element를 복사해서 반환함



AJAX - Request 보내기
AJAX
브라우저에서 페이지를 이동하지 않고 자바스크립트를 통해 HTTP Request를 보내고 받아 JS에서 처리할 수 있음
사용자에게 더 나은 사용 경험 제공, 대부분의 웹사이트에서 사용되고 있는 기술
1. AJAX를 위한 객체 생성
var req = new XMLHttpRequest(); // HTTP 요청을 만들 수 있는 새로운 객체를 생성하는 명령
2. 요청의 방식과 URL 설정
req.open("GET", "./data.txt"); // http request method와 URL 설정
3. 요청 전송
req.send();
응답 확인
req.response에 저장됨
비동기 방식으로 요청하기 때문에 send 메소드 호출 후, 바로 코드에서 접근하면 데이터가 비어 있음
AJAX의 진행에 따라 호출되는 callback함수를 활용해야 함.
브라우저 옵션
--disable-web-security 옵션
브라우저의 보안 정책을 우회하기 위해 사용하는 옵션

same-origin-policy등을 비활성화 함




AJAX - Response 받아서 처리하기
AJAX
readyState 속성
AJAX 요청에 따라 0~4까지 변화함
readyState	의미
0	open 메소드 호출 전
1	open 메소드 호출 후, send 메소드 호출 전
2	보낸 요청에 대해 응답 헤더가 수신된 후
3	응답의 바디 부분이 수신중일 때
4	모든 응답이 수신되었을 때
onreadystatechange 속성
readyState가 변할 때마다 호출되는 콜백 함수
status 속성
HTTP response의 응답 헤더에 기록된 코드

Response Code	의미
200	OK
404	Not Found
500	Internal Error
...	...
응답을 정상적으로 수신한 경우
readyState : 4
status : 200
기타 callback function 활용 가능한 속성
onloadstart
onprogress
onabort
onerror
onload
ontimeout
onloadend


JSON.stringify( object )
인자로 받은 객체를 JSON 문자열로 반환함
JSON.parse( sring )
인자로 받은 문자열을 Javascript Object로 변경해 반환함